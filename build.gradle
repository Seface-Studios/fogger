plugins {
	 id 'maven-publish'
  id 'fabric-loom' version '1.6-SNAPSHOT'
}

base {
	 archivesName = "${mod_name}@fabric-${minecraft_version}"
}

repositories {
	 mavenCentral()
}

loom {
	 splitEnvironmentSourceSets()

	 accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")

  mixin {
    defaultRefmapName.set("${mod_id}.refmap.json")
  }

	 mods {
		  "${mod_id}" {
			   sourceSet sourceSets.main
			   sourceSet sourceSets.client
		  }
	 }

}

dependencies {
	 minecraft "com.mojang:minecraft:${minecraft_version}"
	 mappings "net.fabricmc:yarn:${fabric_yarn_mappings}:v2"
	 modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	 modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

	 // Lombok
	 compileOnly "org.projectlombok:lombok:${lombok_version}"
	 annotationProcessor "org.projectlombok:lombok:${lombok_version}"
}

processResources {
  def expandedProps = [
    mod_id           : mod_id,
    version          : version,
    mod_name         : mod_name,
    mod_description  : mod_description,
    license          : license,
    mod_author       : mod_author,
    minecraft_version: minecraft_version,
    fabric_version   : fabric_version,
    group            : project.group,
  ]

  filesMatching(['fabric.mod.json', '*.mixins.json', '*.client.mixins.json']) {
    expand expandedProps
  }

  inputs.properties(expandedProps);
}

tasks.withType(JavaCompile).configureEach {
	 it.options.release = 17
}

java {
	 withSourcesJar()

	 sourceCompatibility = JavaVersion.VERSION_17
	 targetCompatibility = JavaVersion.VERSION_17
}

jar {
	 from(rootProject.file("LICENSE")) {
		  rename { "${it}_${mod_name}"}
	 }
}

publishing {
	 publications {
	 	 create("mavenJava", MavenPublication) {
	 	 	 artifactId = this.base.archivesName.get()
	 	 	 from this.components.java
	 	 }
	}

	 repositories {}

  // Disables Gradle's custom module metadata from being published to maven. The
  // metadata includes mapped dependencies which are not reasonably consumable by
  // other mod developers.
  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }
}
